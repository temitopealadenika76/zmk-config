#include <dt-bindings/zmk/matrix_transform.h>
#include <dt-bindings/led/led.h>

/ {
    chosen {
        zmk,kscan = &kscan0;
        zmk,matrix_transform = &default_transform;
        zmk,underglow = &led_strip;
        zephyr,display = &oled;
    };

    sensors: sensors {
        compatible = "zmk,keymap-sensors";
        sensors = <&left_encoder &left_mouse_scroll &right_encoder &right_mouse_scroll>;
        triggers-per-rotation = <24>;
    };

    default_transform: keymap_transform_0 {
        compatible = "zmk,matrix-transform";
        columns = <12>;
        rows = <7>;

        map = <
                            RC(0,2) RC(0,3) RC(0,4)                             RC(0,8) RC(0,9) RC(0,10)
            RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5)     RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10) RC(1,11)
            RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5)     RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10) RC(2,11)
            RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(3,5)     RC(3,6) RC(3,7) RC(3,8) RC(3,9) RC(3,10) RC(3,11)
            RC(4,0) RC(4,1) RC(4,2) RC(4,3) RC(4,4) RC(4,5)     RC(4,6) RC(4,7) RC(4,8) RC(4,9) RC(4,10) RC(4,11)
            RC(5,0) RC(5,1) RC(5,2) RC(5,3) RC(5,4) RC(5,5)     RC(5,6) RC(5,7) RC(5,8) RC(5,9) RC(5,10) RC(5,11)
                                                    RC(6,5)     RC(6,6)
        >;
    };



    kscan0: kscan {
        compatible = "zmk,kscan-composite";

        matrix {
            kscan = <&kscan1>;
        };

        direct_left {
            kscan = <&kscan2>;
            row-offset = <6>;
        };

        direct_right {
            kscan = <&kscan3>;
            row-offset = <6>;
        };
    };

    kscan1: kscan_matrix {
        compatible = "zmk,kscan-gpio-matrix";
        diode-direction = "col2row";  // Change to "row2col" if needed
        wakeup-source;

        row-gpios
            = <&pro_micro 10 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>   // Row 0 → ️ Mouse Cluster (P009)
            , <&pro_micro 9 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>   // Row 1 → Num (P106)
            , <&gpio1 7 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>      // Row 2 → Top (P107)
            , <&gpio1 2 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>      // Row 3 → Home (P102)
            , <&gpio1 1 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>      // Row 4 → Bottom (P101)
            , <&pro_micro 7 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>;  // Row 5 → Mod (P011)
    };

    kscan2: kscan_direct_left {
        compatible = "zmk,kscan-gpio-direct";
          wakeup-source;
           input-gpios
               = <&pro_micro 16 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
               ;
    };

    left_encoder: encoder_left {
        compatible = "alps,ec11";
        a-gpios = <&pro_micro 15 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        b-gpios = <&pro_micro 14 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        steps = <80>;
        status = "okay";
    };

    left_mouse_scroll: scroll_wheel_left {
        compatible = "alps,ec11";
        a-gpios = <&pro_micro 19 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        b-gpios = <&pro_micro 18 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        steps = <192>;
        status = "okay";
    };

    kscan3: kscan_direct_right {
        compatible = "zmk,kscan-gpio-direct";
          wakeup-source;
           input-gpios
               = <&pro_micro 16 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
               ;
    };

    right_encoder: encoder_right {
        compatible = "alps,ec11";
        a-gpios = <&pro_micro 15 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        b-gpios = <&pro_micro 14 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        steps = <80>;
        status = "okay";
    };

    right_mouse_scroll: scroll_wheel_right {
        compatible = "alps,ec11";
        a-gpios = <&pro_micro 19 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        b-gpios = <&pro_micro 18 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        steps = <192>;
        status = "okay";
    };
};

&pinctrl {
    spi3_default: spi3_default {
        group1 {
            psels = <NRF_PSEL(SPIM_MOSI, 0, 31)>;
        };
    };

    spi3_sleep: spi3_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_MOSI, 0, 31)>;
            low-power-enable;
        };
    };

     i2c0_default: i2c0_default {
         group1 {
             psels = <NRF_PSEL(TWIM_SDA, 0, 17)>,
                 <NRF_PSEL(TWIM_SCL, 0, 20)>;
         };
     };

     i2c0_sleep: i2c0_sleep {
         group1 {
             psels = <NRF_PSEL(TWIM_SDA, 0, 17)>,
                 <NRF_PSEL(TWIM_SCL, 0, 20)>;
             low-power-enable;
         };
     };

};

&spi3 {
    compatible = "nordic,nrf-spim";
    status = "okay";

    pinctrl-0 = <&spi3_default>;
    pinctrl-1 = <&spi3_sleep>;
    pinctrl-names = "default", "sleep";

    led_strip: ws2812@0 {
        compatible = "worldsemi,ws2812-spi";

        /* SPI */
        reg = <0>; /* ignored, but necessary for SPI bindings */
        spi-max-frequency = <4000000>;

        /* WS2812 */
        chain-length = <32>; /* number of LEDs */
        spi-one-frame = <0x70>;
        spi-zero-frame = <0x40>;
        color-mapping = <LED_COLOR_ID_GREEN LED_COLOR_ID_RED LED_COLOR_ID_BLUE>;
    };
};



&pro_micro_i2c {
    status = "okay";
    compatible = "nordic,nrf-twi";

    oled: ssd1306@3c {
        compatible = "solomon,ssd1306fb";
        reg = <0x3c>;
        width = <128>;
        height = <32>;
        segment-offset = <0>;
        page-offset = <0>;
        display-offset = <0>;
        multiplex-ratio = <31>;
        segment-remap;
        com-invdir;
        com-sequential;
        //inversion-on; //this swaps the colors for the display from black on white to white on black
        prechargep = <0x22>;
    };
};
